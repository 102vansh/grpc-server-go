// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/greet.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreetsServiceClient is the client API for GreetsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetsServiceClient interface {
	// simple req res arch
	Sayhello(ctx context.Context, in *Noparams, opts ...grpc.CallOption) (*Helloresponse, error)
	// server streaming
	Sayhelloserverstreaming(ctx context.Context, in *Namelist, opts ...grpc.CallOption) (GreetsService_SayhelloserverstreamingClient, error)
	// client streaming
	Sayhelloclientstreaming(ctx context.Context, opts ...grpc.CallOption) (GreetsService_SayhelloclientstreamingClient, error)
	// bidirectional streaming
	Sayhellobidirectionalstreaming(ctx context.Context, opts ...grpc.CallOption) (GreetsService_SayhellobidirectionalstreamingClient, error)
}

type greetsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetsServiceClient(cc grpc.ClientConnInterface) GreetsServiceClient {
	return &greetsServiceClient{cc}
}

func (c *greetsServiceClient) Sayhello(ctx context.Context, in *Noparams, opts ...grpc.CallOption) (*Helloresponse, error) {
	out := new(Helloresponse)
	err := c.cc.Invoke(ctx, "/greet_service.GreetsService/Sayhello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetsServiceClient) Sayhelloserverstreaming(ctx context.Context, in *Namelist, opts ...grpc.CallOption) (GreetsService_SayhelloserverstreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetsService_ServiceDesc.Streams[0], "/greet_service.GreetsService/Sayhelloserverstreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetsServiceSayhelloserverstreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreetsService_SayhelloserverstreamingClient interface {
	Recv() (*Helloresponse, error)
	grpc.ClientStream
}

type greetsServiceSayhelloserverstreamingClient struct {
	grpc.ClientStream
}

func (x *greetsServiceSayhelloserverstreamingClient) Recv() (*Helloresponse, error) {
	m := new(Helloresponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetsServiceClient) Sayhelloclientstreaming(ctx context.Context, opts ...grpc.CallOption) (GreetsService_SayhelloclientstreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetsService_ServiceDesc.Streams[1], "/greet_service.GreetsService/Sayhelloclientstreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetsServiceSayhelloclientstreamingClient{stream}
	return x, nil
}

type GreetsService_SayhelloclientstreamingClient interface {
	Send(*Hellorequest) error
	CloseAndRecv() (*Messagelist, error)
	grpc.ClientStream
}

type greetsServiceSayhelloclientstreamingClient struct {
	grpc.ClientStream
}

func (x *greetsServiceSayhelloclientstreamingClient) Send(m *Hellorequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetsServiceSayhelloclientstreamingClient) CloseAndRecv() (*Messagelist, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Messagelist)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetsServiceClient) Sayhellobidirectionalstreaming(ctx context.Context, opts ...grpc.CallOption) (GreetsService_SayhellobidirectionalstreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetsService_ServiceDesc.Streams[2], "/greet_service.GreetsService/Sayhellobidirectionalstreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetsServiceSayhellobidirectionalstreamingClient{stream}
	return x, nil
}

type GreetsService_SayhellobidirectionalstreamingClient interface {
	Send(*Hellorequest) error
	Recv() (*Helloresponse, error)
	grpc.ClientStream
}

type greetsServiceSayhellobidirectionalstreamingClient struct {
	grpc.ClientStream
}

func (x *greetsServiceSayhellobidirectionalstreamingClient) Send(m *Hellorequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetsServiceSayhellobidirectionalstreamingClient) Recv() (*Helloresponse, error) {
	m := new(Helloresponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetsServiceServer is the server API for GreetsService service.
// All implementations must embed UnimplementedGreetsServiceServer
// for forward compatibility
type GreetsServiceServer interface {
	// simple req res arch
	Sayhello(context.Context, *Noparams) (*Helloresponse, error)
	// server streaming
	Sayhelloserverstreaming(*Namelist, GreetsService_SayhelloserverstreamingServer) error
	// client streaming
	Sayhelloclientstreaming(GreetsService_SayhelloclientstreamingServer) error
	// bidirectional streaming
	Sayhellobidirectionalstreaming(GreetsService_SayhellobidirectionalstreamingServer) error
	mustEmbedUnimplementedGreetsServiceServer()
}

// UnimplementedGreetsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetsServiceServer struct {
}

func (UnimplementedGreetsServiceServer) Sayhello(context.Context, *Noparams) (*Helloresponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sayhello not implemented")
}
func (UnimplementedGreetsServiceServer) Sayhelloserverstreaming(*Namelist, GreetsService_SayhelloserverstreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method Sayhelloserverstreaming not implemented")
}
func (UnimplementedGreetsServiceServer) Sayhelloclientstreaming(GreetsService_SayhelloclientstreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method Sayhelloclientstreaming not implemented")
}
func (UnimplementedGreetsServiceServer) Sayhellobidirectionalstreaming(GreetsService_SayhellobidirectionalstreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method Sayhellobidirectionalstreaming not implemented")
}
func (UnimplementedGreetsServiceServer) mustEmbedUnimplementedGreetsServiceServer() {}

// UnsafeGreetsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetsServiceServer will
// result in compilation errors.
type UnsafeGreetsServiceServer interface {
	mustEmbedUnimplementedGreetsServiceServer()
}

func RegisterGreetsServiceServer(s grpc.ServiceRegistrar, srv GreetsServiceServer) {
	s.RegisterService(&GreetsService_ServiceDesc, srv)
}

func _GreetsService_Sayhello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Noparams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetsServiceServer).Sayhello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet_service.GreetsService/Sayhello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetsServiceServer).Sayhello(ctx, req.(*Noparams))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetsService_Sayhelloserverstreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Namelist)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetsServiceServer).Sayhelloserverstreaming(m, &greetsServiceSayhelloserverstreamingServer{stream})
}

type GreetsService_SayhelloserverstreamingServer interface {
	Send(*Helloresponse) error
	grpc.ServerStream
}

type greetsServiceSayhelloserverstreamingServer struct {
	grpc.ServerStream
}

func (x *greetsServiceSayhelloserverstreamingServer) Send(m *Helloresponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GreetsService_Sayhelloclientstreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetsServiceServer).Sayhelloclientstreaming(&greetsServiceSayhelloclientstreamingServer{stream})
}

type GreetsService_SayhelloclientstreamingServer interface {
	SendAndClose(*Messagelist) error
	Recv() (*Hellorequest, error)
	grpc.ServerStream
}

type greetsServiceSayhelloclientstreamingServer struct {
	grpc.ServerStream
}

func (x *greetsServiceSayhelloclientstreamingServer) SendAndClose(m *Messagelist) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetsServiceSayhelloclientstreamingServer) Recv() (*Hellorequest, error) {
	m := new(Hellorequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GreetsService_Sayhellobidirectionalstreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetsServiceServer).Sayhellobidirectionalstreaming(&greetsServiceSayhellobidirectionalstreamingServer{stream})
}

type GreetsService_SayhellobidirectionalstreamingServer interface {
	Send(*Helloresponse) error
	Recv() (*Hellorequest, error)
	grpc.ServerStream
}

type greetsServiceSayhellobidirectionalstreamingServer struct {
	grpc.ServerStream
}

func (x *greetsServiceSayhellobidirectionalstreamingServer) Send(m *Helloresponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetsServiceSayhellobidirectionalstreamingServer) Recv() (*Hellorequest, error) {
	m := new(Hellorequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetsService_ServiceDesc is the grpc.ServiceDesc for GreetsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greet_service.GreetsService",
	HandlerType: (*GreetsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sayhello",
			Handler:    _GreetsService_Sayhello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sayhelloserverstreaming",
			Handler:       _GreetsService_Sayhelloserverstreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Sayhelloclientstreaming",
			Handler:       _GreetsService_Sayhelloclientstreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Sayhellobidirectionalstreaming",
			Handler:       _GreetsService_Sayhellobidirectionalstreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/greet.proto",
}
